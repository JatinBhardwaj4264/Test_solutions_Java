Binary equivalent using recursion
Write a recursive function decimalToBinary that accepts an integer as a parameter and returns an integer whose digits look like that number's representation in binary (base-2). For example, the call of decimalToBinary(43) should return 101011.

Constraints: Do not use a string in your solution. Also do not use any built-in base conversion functions from the system libraries. solve the problem recursively.

Sample Input :

1 // no. of testcases
43
Sample Output :

101011

=====================================================================================================================================================================================================================

import java.util.Scanner;
class Result{ 
    static int decimalToBinary(int n){ 
        if(n==0)
            return 0;
        if(n==1)
            return 1;
        
        int last_digit= n%2;
        return (decimalToBinary(n/2)*10+last_digit);
 
    } 
}
class Main{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = Integer.parseInt(sc.nextLine().trim());

        while (T-- > 0) {
            int no = Integer.parseInt(sc.nextLine().trim());
            System.out.println(Result.decimalToBinary(no));
        } 
    }
}
