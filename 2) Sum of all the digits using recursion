Sum of all the digits using recursion 
Write a recursive function sumOfDigits that accepts an integer as a parameter and returns the sum of its digits. For example, calling sumOfDigits(1729) should return 1 + 7 + 2 + 9, which is 19. If the number is negative, return the negation of the value. For example, calling sumOfDigits(-1729) should return -19.

Constraints: Do not declare any global variables. Do not use any loops; you must use recursion. Also do not solve this problem using a string. You can declare as many primitive variables like ints as you like. You are allowed to define other "helper" functions if you like; they are subject to these same constraints.

========================================================================================================================================================================================================================

import java.util.Scanner;
// Other imports go here
// Do NOT change the class name
class Main{
    public static int sumOfDigits(int num)
    {  if(num<0)
            return -sumOfDigits(-num);
        if(num==0)
            return 0;
        
        return (num%10 + sumOfDigits(num/10));
    }
    public static void main(String[] args)
    {
        // Write your code here
       
      Scanner in = new Scanner(System.in);
      int t = in.nextInt();
      while(t-- > 0)
      {
        int n = in.nextInt();
        System.out.println(sumOfDigits(n));
      }}
    }
